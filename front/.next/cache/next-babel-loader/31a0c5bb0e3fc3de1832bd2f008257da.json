{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\teamproject\\\\project\\\\LocalRentalKing\\\\front\\\\components\\\\Tags.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Tag, Button } from 'antd';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_CHANGE_TAG_REQUEST, LOAD_POST_REQUEST, UPDATE_TAG } from \"../reducers/post\";\n\nfunction Tags({\n  tagsData,\n  boardNum\n}) {\n  const {\n    CheckableTag\n  } = Tag;\n  const dispatch = useDispatch();\n  const {\n    0: selectedTags,\n    1: setSelectedTags\n  } = useState([]);\n  const handleChange = useCallback((tag, checked) => {\n    const nextSelectedTags = checked ? [tag, ...selectedTags] : selectedTags.filter(t => t !== tag);\n    setSelectedTags([...nextSelectedTags]);\n    dispatch({\n      type: LOAD_CHANGE_TAG_REQUEST,\n      data: nextSelectedTags[0],\n      // 현재 선택한 태그명\n      boardNum: boardNum // 현재 렌더링중인 게시판 고유번호\n\n    });\n    dispatch({\n      type: UPDATE_TAG,\n      data: nextSelectedTags[0] // 전역적으로 현재 선택한 태그를 공유한다.\n\n    });\n    console.log('You are interested in: ', nextSelectedTags);\n    console.log('You are interested in: ', nextSelectedTags[0]);\n  }, []);\n  useEffect(() => {\n    setSelectedTags(['전체']);\n  }, []);\n  return __jsx(React.Fragment, null, tagsData.map(tag => __jsx(CheckableTag, {\n    key: tag,\n    checked: selectedTags.indexOf(tag) > -1,\n    onChange: checked => handleChange(tag, checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, tag)));\n}\n\nexport default Tags;","map":{"version":3,"sources":["C:/Bootcamp/teamproject/project/LocalRentalKing/front/components/Tags.js"],"names":["React","useCallback","useEffect","useState","Tag","Button","useDispatch","useSelector","LOAD_CHANGE_TAG_REQUEST","LOAD_POST_REQUEST","UPDATE_TAG","Tags","tagsData","boardNum","CheckableTag","dispatch","selectedTags","setSelectedTags","handleChange","tag","checked","nextSelectedTags","filter","t","type","data","console","log","map","indexOf"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AAEA,SAASC,GAAT,EAAeC,MAAf,QAA6B,MAA7B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,uBAAR,EAAiCC,iBAAjC,EAAoDC,UAApD,QAAqE,kBAArE;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,QAAD;AAAYC,EAAAA;AAAZ,CAAd,EAAqC;AAEnC,QAAM;AAAEC,IAAAA;AAAF,MAAmBV,GAAzB;AAEA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM;AAAA,OAACU,YAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMe,YAAY,GAAGjB,WAAW,CAAC,CAACkB,GAAD,EAAMC,OAAN,KAAkB;AACjD,UAAMC,gBAAgB,GAAGD,OAAO,GAAG,CAAED,GAAF,EAAM,GAAGH,YAAT,CAAH,GAA6BA,YAAY,CAACM,MAAb,CAAoBC,CAAC,IAAIA,CAAC,KAAKJ,GAA/B,CAA7D;AACAF,IAAAA,eAAe,CAAC,CAAC,GAAGI,gBAAJ,CAAD,CAAf;AAEAN,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAChB,uBADE;AAEPiB,MAAAA,IAAI,EAACJ,gBAAgB,CAAC,CAAD,CAFd;AAEmB;AAC1BR,MAAAA,QAAQ,EAACA,QAHF,CAGY;;AAHZ,KAAD,CAAR;AAKAE,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEd,UADC;AAEPe,MAAAA,IAAI,EAACJ,gBAAgB,CAAC,CAAD,CAFd,CAEmB;;AAFnB,KAAD,CAAR;AAKAK,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCN,gBAAvC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCN,gBAAgB,CAAC,CAAD,CAAvD;AACC,GAhB6B,EAgB5B,EAhB4B,CAAhC;AAkBAnB,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,eAAe,CAAC,CAAC,IAAD,CAAD,CAAf;AACD,GAFQ,EAEP,EAFO,CAAT;AAIA,SACE,4BACGL,QAAQ,CAACgB,GAAT,CAAaT,GAAG,IACf,MAAC,YAAD;AACE,IAAA,GAAG,EAAEA,GADP;AAEE,IAAA,OAAO,EAAEH,YAAY,CAACa,OAAb,CAAqBV,GAArB,IAA4B,CAAC,CAFxC;AAGE,IAAA,QAAQ,EAAEC,OAAO,IAAIF,YAAY,CAACC,GAAD,EAAMC,OAAN,CAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,GALH,CADD,CADH,CADF;AAaD;;AAED,eAAeR,IAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Tag , Button } from 'antd';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {LOAD_CHANGE_TAG_REQUEST, LOAD_POST_REQUEST, UPDATE_TAG} from \"../reducers/post\";\n\nfunction Tags({tagsData , boardNum}) {\n\n  const { CheckableTag } = Tag;\n\n  const dispatch = useDispatch();\n\n  const [selectedTags,setSelectedTags] =useState([]);\n\n  const handleChange = useCallback((tag, checked) => {\n    const nextSelectedTags = checked ? [ tag,...selectedTags,] : selectedTags.filter(t => t !== tag);\n    setSelectedTags([...nextSelectedTags]);\n\n    dispatch({\n      type:LOAD_CHANGE_TAG_REQUEST,\n      data:nextSelectedTags[0], // 현재 선택한 태그명\n      boardNum:boardNum, // 현재 렌더링중인 게시판 고유번호\n    })\n    dispatch({\n      type: UPDATE_TAG,\n      data:nextSelectedTags[0], // 전역적으로 현재 선택한 태그를 공유한다.\n    });\n\n    console.log('You are interested in: ', nextSelectedTags);\n    console.log('You are interested in: ', nextSelectedTags[0]);\n    },[]);\n\n  useEffect(()=>{\n    setSelectedTags(['전체']);\n  },[]);\n\n  return (\n    <>\n      {tagsData.map(tag => (\n        <CheckableTag\n          key={tag}\n          checked={selectedTags.indexOf(tag) > -1}\n          onChange={checked => handleChange(tag, checked)}\n        >\n          {tag}\n        </CheckableTag>\n      ))}\n    </>\n  );\n}\n\nexport default Tags;\n"]},"metadata":{},"sourceType":"module"}