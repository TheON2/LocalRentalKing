{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\teamproject\\\\project\\\\LocalRentalKing\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { Button, Col, Row } from 'antd';\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport LoginForm from '../components/LoginForm';\nimport { logoutRequestAction } from '../reducers/user';\nimport { LOAD_POST_REQUEST, TEST } from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard1 from \"../components/PostCard1\";\nimport Layout from \"../components/Layout\";\n\nfunction Home() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      reTweetError = _useSelector2.reTweetError,\n      id = _useSelector2.id,\n      object_TagsData = _useSelector2.object_TagsData,\n      selectedTag = _useSelector2.selectedTag;\n\n  useEffect(function () {\n    var onScroll = function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\n        if (hasMorePost && !loadPostLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data: selectedTag,\n            boardNum: 1,\n            lastId: lastId\n          });\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\n\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, loadPostLoading]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Tags, {\n    tagsData: object_TagsData,\n    boardNum: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard1, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 34\n      }\n    });\n  })), \"}\");\n}\n\n_s(Home, \"fBN3ymk0DARO9+2NCUi1Rd98FUw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Bootcamp/teamproject/project/LocalRentalKing/front/pages/index.js"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","useInView","Button","Col","Row","AppLayout","LoginForm","logoutRequestAction","LOAD_POST_REQUEST","TEST","Tags","PostCard1","Layout","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostLoading","reTweetError","id","object_TagsData","selectedTag","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","type","data","boardNum","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\nimport wrapper from '../store/configureStore';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { END } from 'redux-saga';\nimport {Button, Col, Row} from 'antd';\n\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport LoginForm from '../components/LoginForm';\n\nimport {LOAD_MY_INFO_REQUEST, logoutRequestAction} from '../reducers/user';\nimport {LOAD_POST_REQUEST, TEST, UPDATE_TAG} from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard1 from \"../components/PostCard1\";\nimport axios from \"axios\";\nimport Layout from \"../components/Layout\";\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { mainPosts, hasMorePost, loadPostLoading, reTweetError, id , object_TagsData , selectedTag } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\n        if (hasMorePost && !loadPostLoading ) {\n          const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data:selectedTag,\n            boardNum:1,\n            lastId:lastId,\n          });\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\n      }\n    };\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [ hasMorePost, loadPostLoading]);\n\n  return (\n    <div>\n      <Layout>\n\n        <Tags tagsData={object_TagsData} boardNum={1}/>\n        {mainPosts.map((post) => <PostCard1 key={post.id} post={post} />)}\n\n      </Layout>\n\n\n      {/*<Row gutter={8}>*/}\n      {/*  <Col xs={24} md={10}>*/}\n      {/*    <img src=\"main.png\" style={{ height: 950 }}/>*/}\n      {/*  </Col>*/}\n      {/*  <Col xs={24} md={10}>*/}\n      {/*    <h1>우리동네 렌탈대장을 지금 이용해 보세요!</h1>*/}\n      {/*    <LoginForm style={{ marginTop: 300 }} />*/}\n      {/*  </Col>*/}\n      {/*  <Col xs={24} md={4}>*/}\n      {/*  </Col>*/}\n      {/*</Row>*/}\n    }\n    </div>\n  );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST,\n  });\n  context.store.dispatch({\n    type: UPDATE_TAG,\n    data:\"전체\",\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data:\"전체\",\n    boardNum:1,\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}