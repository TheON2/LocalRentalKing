{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport LoginForm from \"../components/LoginForm\";\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    reTweetError,\n    id\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (reTweetError) {\n      alert(reTweetError);\n    }\n  }, [reTweetError]); // useEffect(() => {\n  //   dispatch({\n  //     type: LOAD_MY_INFO_REQUEST,\n  //   });\n  // }, []);\n  //\n  // useEffect(() => {\n  //   dispatch({\n  //     type: LOAD_POST_REQUEST,\n  //   });\n  // }, []);\n\n  const [ref, inView] = useInView();\n  useEffect(() => {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POST_REQUEST,\n        lastId\n      });\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n  return (// <AppLayout>\n    //   {me && <PostForm />}\n    //   {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n    //   <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\n    // </AppLayout>\n    __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, __jsx(LoginForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }\n    }))\n  );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","useInView","axios","END","AppLayout","PostForm","PostCard","LOAD_POST_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","LoginForm","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostLoading","reTweetError","id","post","alert","ref","inView","lastId","length","type","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAASb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA,eAA1B;AAA2CC,IAAAA,YAA3C;AAAyDC,IAAAA;AAAzD,MAAgEpB,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACO,IAAlB,CAAjF;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,YAAJ,EAAkB;AAChBG,MAAAA,KAAK,CAACH,YAAD,CAAL;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT,CALc,CAWd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBvB,SAAS,EAA/B;AAEAH,EAAAA,SAAS,CACP,MAAM;AACJ,QAAI0B,MAAM,IAAIP,WAAV,IAAyB,CAACC,eAA9B,EAA+C;AAAA;;AAC7C,YAAMO,MAAM,iBAAGT,SAAS,CAACA,SAAS,CAACU,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCN,EAAhD;AACAR,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAEpB,iBADC;AAEPkB,QAAAA;AAFO,OAAD,CAAR;AAID;AACF,GATM,EAUP,CAACD,MAAD,EAASP,WAAT,EAAsBC,eAAtB,EAAuCF,SAAvC,EAAkDI,EAAlD,CAVO,CAAT;AAaA,SACE;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL;AANF;AAQD;;AAED,OAAO,MAAMQ,kBAAkB,GAAGnB,OAAO,CAACmB,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC9E,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACA5B,EAAAA,KAAK,CAAC+B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACA5B,EAAAA,KAAK,CAAC+B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIL,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AAAE;AAC3B5B,IAAAA,KAAK,CAAC+B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACD;;AAEDD,EAAAA,OAAO,CAACM,KAAR,CAAcvB,QAAd,CAAuB;AACrBe,IAAAA,IAAI,EAAEnB;AADe,GAAvB;AAGAqB,EAAAA,OAAO,CAACM,KAAR,CAAcvB,QAAd,CAAuB;AACrBe,IAAAA,IAAI,EAAEpB;AADe,GAAvB;AAGAsB,EAAAA,OAAO,CAACM,KAAR,CAAcvB,QAAd,CAAuBT,GAAvB;AACA,QAAM0B,OAAO,CAACM,KAAR,CAAcC,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAhBiC,CAA3B;AAkBP,eAAe1B,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport axios from 'axios';\r\nimport { END } from 'redux-saga';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, reTweetError, id } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    if (reTweetError) {\r\n      alert(reTweetError);\r\n    }\r\n  }, [reTweetError]);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: LOAD_MY_INFO_REQUEST,\r\n  //   });\r\n  // }, []);\r\n  //\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: LOAD_POST_REQUEST,\r\n  //   });\r\n  // }, []);\r\n\r\n  const [ref, inView] = useInView();\r\n\r\n  useEffect(\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n        dispatch({\r\n          type: LOAD_POST_REQUEST,\r\n          lastId,\r\n        });\r\n      }\r\n    },\r\n    [inView, hasMorePost, loadPostLoading, mainPosts, id],\r\n  );\r\n\r\n  return (\r\n    // <AppLayout>\r\n    //   {me && <PostForm />}\r\n    //   {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n    //   <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n    // </AppLayout>\r\n    <div><LoginForm /></div>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}