{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport moment from 'moment';\nimport axios from 'axios';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nimport useSWR from \"swr\";\nmoment.locale('ko');\n\nvar fetcher = function fetcher(url) {\n  return axios.get(url, {\n    withCredentials: true\n  }).then(function (result) {\n    return result.data;\n  });\n};\n\nfunction PostCard(_ref) {\n  _s();\n\n  var _this = this;\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  });\n\n  var _useSWR = useSWR(\"http://localhost:3065/user/followers?limit=\".concat(followersLimit), fetcher),\n      followersData = _useSWR.data,\n      followerError = _useSWR.error;\n\n  var onLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onUnlike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, [id]);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  });\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onModify = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, !post.RetweetId && __jsx(Button, {\n        onClick: onModify,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 43\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 23\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 48\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.Retweet.User.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 24\n      }\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.User.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 24\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }))), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: \"/user/\".concat(item.User.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 19\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }\n        }, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 24\n          }\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(PostCard, \"8f6OKVlzs9qYMW3cSrZqYzYQEiI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSWR];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useCallback","useState","Button","Card","Popover","Avatar","List","Comment","EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","Link","useDispatch","useSelector","PropTypes","moment","axios","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","useSWR","locale","fetcher","url","get","withCredentials","then","result","data","PostCard","post","dispatch","state","removePostLoading","commentFormOpened","setCommentFormOpened","id","user","me","liked","Likers","find","v","followersLimit","followersData","followerError","error","onLike","alert","type","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","onModify","marginBottom","Images","User","RetweetId","nickname","Retweet","createdAt","format","content","Comments","length","item","propTypes","shape","number","object","UserId","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport Link from 'next/link';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PropTypes } from 'prop-types';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\nimport useSWR from \"swr\";\r\n\r\nmoment.locale('ko');\r\n\r\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((result) => result.data);\r\n\r\nfunction PostCard({ post }) {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading } = useSelector((state) => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n\r\n  const { data: followersData, error: followerError } = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher);\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, [id]);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  });\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onModify = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id\r\n                  ? (\r\n                    <>\r\n                      {!post.RetweetId && <Button onClick={onModify}>수정</Button>}\r\n                      <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n                    )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.Retweet.User.id}`}>\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />}\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <>\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.User.id}`}>\r\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n              )}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content} />}\r\n              />\r\n            </>\r\n          )}\r\n\r\n      </Card>\r\n      {commentFormOpened && (\r\n      <div>\r\n        <CommentForm post={post} />\r\n        <List\r\n          header={`${post.Comments.length}개의 댓글`}\r\n          itemLayout=\"horizontal\"\r\n          dataSource={post.Comments}\r\n          renderItem={(item) => (\r\n            <li>\r\n              <Comment\r\n                author={item.User.nickname}\r\n                avatar={(\r\n                  <Link href={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                content={item.content}\r\n              />\r\n            </li>\r\n          )}\r\n        />\r\n      </div>\r\n      )}\r\n      {/* <CommentForm/> */}\r\n      {/* <Comments/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    UserId: PropTypes.number,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}