{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bootcamp\\\\teamproject\\\\project\\\\LocalRentalKing\\\\front\\\\pages\\\\playground.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport wrapper from '../store/configureStore';\nimport Head from 'next/head';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_POST_REQUEST, UPDATE_TAG } from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard1 from \"../components/PostCard1\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\nimport Layout from \"../components/Layout\";\n\nfunction PlayGround() {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    play_tagsData,\n    selectedTag,\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    id\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (!(me && me.id)) {\n      alert('로그인 후 이용 가능 합니다.');\n      Router.replace('/loginpage'); // push와 다르게 replace는 이전 기록 자체를 지워버리기에 이자리에 더 적합하다.\n    }\n  }, [me && me.id]);\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\n        if (hasMorePost && !loadPostLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n          console.log(selectedTag);\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data: selectedTag,\n            boardNum: 6,\n            lastId: lastId\n          });\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\n\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, loadPostLoading]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"\\uB3D9\\uB124 \\uB180\\uC774\\uD130 | \\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\")), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Tags, {\n    tagsData: play_tagsData,\n    boardNum: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), mainPosts.map(post => __jsx(PostCard1, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 34\n    }\n  }))));\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: UPDATE_TAG,\n    data: \"전체\"\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: \"전체\",\n    boardNum: 6\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default PlayGround;","map":{"version":3,"sources":["C:/Bootcamp/teamproject/project/LocalRentalKing/front/pages/playground.js"],"names":["React","useEffect","wrapper","Head","useDispatch","useSelector","END","useInView","AppLayout","LOAD_MY_INFO_REQUEST","LOAD_POST_REQUEST","UPDATE_TAG","Tags","PostCard1","axios","Router","Layout","PlayGround","dispatch","me","state","user","play_tagsData","selectedTag","mainPosts","hasMorePost","loadPostLoading","id","post","alert","replace","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","console","log","type","data","boardNum","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport wrapper from '../store/configureStore';\nimport Head from 'next/head';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {END} from 'redux-saga';\nimport {useInView} from \"react-intersection-observer\";\n\nimport AppLayout from '../components/AppLayout/AppLayout';\n\nimport {LOAD_MY_INFO_REQUEST} from '../reducers/user';\nimport {LOAD_POST_REQUEST, UPDATE_TAG} from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard1 from \"../components/PostCard1\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\nimport Layout from \"../components/Layout\";\n\nfunction PlayGround() {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state) => state.user);\n  const { play_tagsData,selectedTag,mainPosts, hasMorePost, loadPostLoading, id } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      alert('로그인 후 이용 가능 합니다.');\n      Router.replace('/loginpage'); // push와 다르게 replace는 이전 기록 자체를 지워버리기에 이자리에 더 적합하다.\n    }\n  }, [me && me.id]);\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\n        if (hasMorePost && !loadPostLoading) {\n          const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n          console.log(selectedTag);\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data:selectedTag,\n            boardNum:6,\n            lastId:lastId,\n          });\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\n      }\n    };\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [ hasMorePost, loadPostLoading]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return (\n    <>\n      <Head>\n        <title>동네 놀이터 | 우리동네 렌탈대장</title>\n      </Head>\n      <Layout>\n        <Tags tagsData={play_tagsData} boardNum={6}/>\n        {mainPosts.map((post) => <PostCard1 key={post.id} post={post} />)}\n      </Layout>\n    </>\n  );\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST,\n  });\n  context.store.dispatch({\n    type: UPDATE_TAG,\n    data:\"전체\",\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data:\"전체\",\n    boardNum:6,\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\n\nexport default PlayGround;\n"]},"metadata":{},"sourceType":"module"}