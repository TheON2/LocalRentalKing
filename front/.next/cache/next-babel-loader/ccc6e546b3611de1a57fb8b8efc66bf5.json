{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCardContent.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Button, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nvar TextArea = Input.TextArea;\n\nfunction PostCardContent(_ref) {\n  _s();\n\n  var _this = this;\n\n  var postData = _ref.postData,\n      editMode = _ref.editMode,\n      onChangePost = _ref.onChangePost,\n      onCancelUpdate = _ref.onCancelUpdate;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      updatePostLoading = _useSelector.updatePostLoading,\n      updatePostDone = _useSelector.updatePostDone;\n\n  var _useState = useState(postData),\n      editText = _useState[0],\n      setEditText = _useState[1];\n\n  useEffect(function () {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  });\n  return (// 첫 번째 게시글 #해시태그 #해시태그\n    __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, editMode ? __jsx(React.Fragment, null, __jsx(TextArea, {\n      value: editText,\n      onChange: onChangeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }), __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      loading: updatePostLoading,\n      onClick: onChangePost(editText),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }, \"\\uC218\\uC815\"), __jsx(Button, {\n      type: \"danger\",\n      onClick: onCancelUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, \"\\uCDE8\\uC18C\"))) : postData.split(/(#[^\\s#]+)/g).map(function (v, i) {\n      if (v.match(/(#[^\\s#]+)/)) {\n        return __jsx(Link, {\n          href: \"/hashtag/\".concat(v.slice(1)),\n          prefetch: false,\n          key: i,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 20\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 83\n          }\n        }, v));\n      }\n\n      return v;\n    }))\n  );\n}\n\n_s(PostCardContent, \"TtzJjb8m3UZlCxRREZJyhMFauZk=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onChangePost: PropTypes.func.isRequired,\n  onCancelUpdate: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/components/PostCardContent.js"],"names":["React","useState","useCallback","useEffect","Link","Button","Input","PropTypes","useSelector","TextArea","PostCardContent","postData","editMode","onChangePost","onCancelUpdate","state","post","updatePostLoading","updatePostDone","editText","setEditText","onChangeText","e","target","value","split","map","v","i","match","slice","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Button, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { TextArea } = Input;\r\nfunction PostCardContent({ postData, editMode, onChangePost, onCancelUpdate }) {\r\n  const { updatePostLoading, updatePostDone } = useSelector((state) => state.post);\r\n  const [editText, setEditText] = useState(postData);\r\n\r\n  useEffect(() => {\r\n    if (updatePostDone) {\r\n      onCancelUpdate();\r\n    }\r\n  }, [updatePostDone]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setEditText(e.target.value);\r\n  });\r\n\r\n  return ( // 첫 번째 게시글 #해시태그 #해시태그\r\n    <div>\r\n      {editMode\r\n        ? (\r\n          <>\r\n            <TextArea value={editText} onChange={onChangeText} />\r\n            <Button.Group>\r\n              <Button loading={updatePostLoading} onClick={onChangePost(editText)}>수정</Button>\r\n              <Button type=\"danger\" onClick={onCancelUpdate}>취소</Button>\r\n            </Button.Group>\r\n          </>\r\n        )\r\n        : postData.split(/(#[^\\s#]+)/g).map((v, i) => {\r\n          if (v.match(/(#[^\\s#]+)/)) {\r\n            return <Link href={`/hashtag/${v.slice(1)}`} prefetch={false} key={i}><a>{v}</a></Link>;\r\n          }\r\n          return v;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n  editMode: PropTypes.bool,\r\n  onChangePost: PropTypes.func.isRequired,\r\n  onCancelUpdate: PropTypes.func.isRequired,\r\n};\r\n\r\nPostCardContent.defaultProps = {\r\n  editMode: false,\r\n};\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}