{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\objectrecieve.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { LOAD_O_RECIEVE_POST_REQUEST } from '../reducers/post';\n\nfunction ObjectRecieve() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useInView = useInView(),\n      _useInView2 = _slicedToArray(_useInView, 2),\n      ref = _useInView2[0],\n      inView = _useInView2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      id = _useSelector2.id,\n      category = _useSelector2.category;\n\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  function () {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n      dispatch({\n        type: LOAD_O_RECIEVE_POST_REQUEST,\n        lastId: lastId,\n        // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n        category: category // 매개변수로 어떤 카테고리의 게시물을 들고올지까지 정해준다면??\n        // 태그 버튼을 클릭함에 따라 post 리듀서의 카테고리 변수를 변경시키고 그에 따라 useEffect가 발동하게 하여\n        // 해당 카테고리에 해당하는 포스트를 들고 오게 한다.\n        // 이럼 게시글의 종류를 분류하는 변수가 두개가 필요하게됨. 해당 게시판 / 해당 카테고리\n\n      });\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id, category]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"\\uBB3C\\uAC74\\uC744 \\uBE4C\\uB824\\uC918 | \\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\")), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Categories:\"), tagsData.map(function (tag) {\n    return __jsx(CheckableTag, {\n      key: tag,\n      checked: selectedTags.indexOf(tag) > -1,\n      onChange: function onChange(checked) {\n        return handleChange(tag, checked);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, tag);\n  }), me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 34\n      }\n    });\n  }), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(ObjectRecieve, \"KPRE/wvQPzbg8LYVpc+U2OxYAxM=\", false, function () {\n  return [useDispatch, useInView, useSelector, useSelector];\n});\n\n_c = ObjectRecieve;\nexport var __N_SSP = true;\nexport default ObjectRecieve;\n\nvar _c;\n\n$RefreshReg$(_c, \"ObjectRecieve\");","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/objectrecieve.js"],"names":["React","useCallback","useEffect","useState","Head","useDispatch","useSelector","useInView","AppLayout","LOAD_O_RECIEVE_POST_REQUEST","ObjectRecieve","dispatch","ref","inView","state","user","me","post","mainPosts","hasMorePost","loadPostLoading","id","category","lastId","length","type","marginRight","tagsData","map","tag","selectedTags","indexOf","checked","handleChange","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport wrapper from '../store/configureStore';\r\nimport Head from 'next/head';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_O_RECIEVE_POST_REQUEST } from '../reducers/post';\r\n\r\nfunction ObjectRecieve() {\r\n  const dispatch = useDispatch();\r\n  const [ref, inView] = useInView();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, id , category } = useSelector((state) => state.post);\r\n\r\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n        dispatch({\r\n          type: LOAD_O_RECIEVE_POST_REQUEST,\r\n          lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n          category, // 매개변수로 어떤 카테고리의 게시물을 들고올지까지 정해준다면??\r\n\r\n          // 태그 버튼을 클릭함에 따라 post 리듀서의 카테고리 변수를 변경시키고 그에 따라 useEffect가 발동하게 하여\r\n          // 해당 카테고리에 해당하는 포스트를 들고 오게 한다.\r\n          // 이럼 게시글의 종류를 분류하는 변수가 두개가 필요하게됨. 해당 게시판 / 해당 카테고리\r\n        });\r\n      }\r\n    },\r\n    [inView, hasMorePost, loadPostLoading, mainPosts, id , category],\r\n  );\r\n\r\n  if (!me) {\r\n    return '내 정보 로딩중...';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>물건을 빌려줘 | 우리동네 렌탈대장</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <span style={{ marginRight: 8 }}>Categories:</span>\r\n        {tagsData.map(tag => (\r\n          <CheckableTag\r\n            key={tag}\r\n            checked={selectedTags.indexOf(tag) > -1}\r\n            onChange={checked => handleChange(tag, checked)}\r\n          >\r\n            {tag}\r\n          </CheckableTag>\r\n        ))}\r\n        {me && <PostForm />}\r\n        {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n        {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_O_RECIEVE_POST_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default ObjectRecieve;\r\n"]},"metadata":{},"sourceType":"module"}