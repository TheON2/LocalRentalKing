{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { END } from 'redux-saga';\nimport { Col, Row } from 'antd';\nimport AppLayout from '../components/AppLayout/AppLayout'; // import PostForm from '../components/PostForm';\n// import PostCard from '../components/PostCard';\n\nimport LoginForm from '../components/LoginForm';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    reTweetError,\n    id\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView(); // useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  //   () => {\n  //     if (inView && hasMorePost && !loadPostLoading) {\n  //       const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n  //       dispatch({\n  //         type: LOAD_POST_REQUEST,\n  //         lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n  //       });\n  //     }\n  //   },\n  //   [inView, hasMorePost, loadPostLoading, mainPosts, id],\n  // );\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, me ? __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 34\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })) : __jsx(Row, {\n    gutter: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 6,\n    md: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: \"main.png\",\n    style: {\n      height: 950\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    xs: 14,\n    md: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"\\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\\uC744 \\uC9C0\\uAE08 \\uC774\\uC6A9\\uD574 \\uBCF4\\uC138\\uC694!\"), __jsx(LoginForm, {\n    style: {\n      marginTop: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    xs: 2,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })));\n} // export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//   const cookie = context.req ? context.req.headers.cookie : '';\n//   axios.defaults.headers.Cookie = ''; // 기존 방식에서는 브라우저에서 쿠키를 만들어주기 때문에 각각의 독립된 브라우저에서 쿠키를 브라우저 >> 프론트 >> 백 으로 보내는 삼중구조지만\n//   // 쿠키가 다른 사용자에게 넘어갈 일이 없었으나 , SSR은 브라우저에서 쿠키를 동봉받아 프론트서버에서 쿠키를 백서버에 전달하는 이중구조 방식으로 , 잘못하면 내 로그인 쿠키로 다른 사용자가 접속하게 될 수 있기때문에\n//   // 이를 방지하기 위하여 우선 헤더에 들어간 쿠키를 공백으로 지워주고 로직을 시작한다.\n//   if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n//     axios.defaults.headers.Cookie = cookie;\n//   }\n//\n//   context.store.dispatch({\n//     type: LOAD_MY_INFO_REQUEST,\n//   });\n//   context.store.dispatch({\n//     type: LOAD_POST_REQUEST,\n//   });\n//   context.store.dispatch(END);\n//   await context.store.sagaTask.toPromise();\n// });\n\n\nexport default Home;","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/index.js"],"names":["React","useEffect","wrapper","axios","useDispatch","useSelector","useInView","END","Col","Row","AppLayout","LoginForm","LOAD_MY_INFO_REQUEST","LOAD_POST_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostLoading","reTweetError","id","post","ref","inView","map","undefined","height","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { END } from 'redux-saga';\r\nimport { Col, Row } from 'antd';\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n// import PostForm from '../components/PostForm';\r\n// import PostCard from '../components/PostCard';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, reTweetError, id } = useSelector((state) => state.post);\r\n  const [ref, inView] = useInView();\r\n\r\n  // useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n  //   () => {\r\n  //     if (inView && hasMorePost && !loadPostLoading) {\r\n  //       const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n  //       dispatch({\r\n  //         type: LOAD_POST_REQUEST,\r\n  //         lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n  //       });\r\n  //     }\r\n  //   },\r\n  //   [inView, hasMorePost, loadPostLoading, mainPosts, id],\r\n  // );\r\n\r\n  return (\r\n\r\n    <div>{me ? (\r\n      <AppLayout>\r\n        {me && <PostForm />}\r\n        {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n      {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    ) : (\r\n      <Row gutter={8}>\r\n        <Col xs={6} md={10}>\r\n          <img src=\"main.png\" style={{ height: 950 }} />\r\n        </Col>\r\n        <Col xs={14} md={10}>\r\n          <h1>우리동네 렌탈대장을 지금 이용해 보세요!</h1>\r\n          <LoginForm style={{ marginTop: 300 }} />\r\n        </Col>\r\n        <Col xs={2} md={4}>\r\n        </Col>\r\n      </Row>\r\n    )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n//   const cookie = context.req ? context.req.headers.cookie : '';\r\n//   axios.defaults.headers.Cookie = ''; // 기존 방식에서는 브라우저에서 쿠키를 만들어주기 때문에 각각의 독립된 브라우저에서 쿠키를 브라우저 >> 프론트 >> 백 으로 보내는 삼중구조지만\r\n//   // 쿠키가 다른 사용자에게 넘어갈 일이 없었으나 , SSR은 브라우저에서 쿠키를 동봉받아 프론트서버에서 쿠키를 백서버에 전달하는 이중구조 방식으로 , 잘못하면 내 로그인 쿠키로 다른 사용자가 접속하게 될 수 있기때문에\r\n//   // 이를 방지하기 위하여 우선 헤더에 들어간 쿠키를 공백으로 지워주고 로직을 시작한다.\r\n//   if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n//     axios.defaults.headers.Cookie = cookie;\r\n//   }\r\n//\r\n//   context.store.dispatch({\r\n//     type: LOAD_MY_INFO_REQUEST,\r\n//   });\r\n//   context.store.dispatch({\r\n//     type: LOAD_POST_REQUEST,\r\n//   });\r\n//   context.store.dispatch(END);\r\n//   await context.store.sagaTask.toPromise();\r\n// });\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}