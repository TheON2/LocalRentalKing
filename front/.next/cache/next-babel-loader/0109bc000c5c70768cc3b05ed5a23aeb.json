{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sendDummyPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changeTag),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadSearchPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rentalPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(writePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadSPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(RelatedPost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(loadLikedPosts),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(modifyPost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked26 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSPost),\n    _marked27 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked28 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked29 = /*#__PURE__*/_regeneratorRuntime.mark(watchModifyPost),\n    _marked30 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadRelatedPost),\n    _marked31 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLikedtagPosts),\n    _marked32 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadRentalPost),\n    _marked33 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadWritePost),\n    _marked34 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSearchPost),\n    _marked35 = /*#__PURE__*/_regeneratorRuntime.mark(watchSendDummyPost),\n    _marked36 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadChangeTag),\n    _marked37 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_CHANGE_TAG_FAILURE, LOAD_CHANGE_TAG_REQUEST, LOAD_CHANGE_TAG_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_LIKED_POSTS_FAILURE, LOAD_LIKED_POSTS_REQUEST, LOAD_LIKED_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_RELATED_POST_FAILURE, LOAD_RELATED_POST_REQUEST, LOAD_RELATED_POST_SUCCESS, LOAD_RENTAL_POST_FAILURE, LOAD_RENTAL_POST_REQUEST, LOAD_RENTAL_POST_SUCCESS, LOAD_SEARCH_POSTS_FAILURE, LOAD_SEARCH_POSTS_REQUEST, LOAD_SEARCH_POSTS_SUCCESS, LOAD_SPOST_FAILURE, LOAD_SPOST_REQUEST, LOAD_SPOST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_WRITE_POST_FAILURE, LOAD_WRITE_POST_REQUEST, LOAD_WRITE_POST_SUCCESS, MODIFY_POST_FAILURE, MODIFY_POST_REQUEST, MODIFY_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, SEND_DUMMYPOST_FAILURE, SEND_DUMMYPOST_REQUEST, SEND_DUMMYPOST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // formdata 전송\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction sendDummyPostAPI(data) {\n  return axios.post('/post/write', data); // formdata 전송\n}\n\nfunction sendDummyPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sendDummyPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(sendDummyPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: SEND_DUMMYPOST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: SEND_DUMMYPOST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data)); // delete는 데이터를 가져갈 수 없다 data는 postId\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction loadPostAPI(data, lastId, boardNum) {\n  console.log(data);\n  return axios.get(\"/posts/\".concat(encodeURIComponent(data), \"/post?lastId=\").concat(lastId || 0, \"&boardNum=\").concat(boardNum || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostAPI, action.data, action.lastId, action.boardNum);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction changeTagAPI(data, boardNum) {\n  console.log(data);\n  return axios.get(\"/posts/\".concat(encodeURIComponent(data), \"/tag?boardNum=\").concat(boardNum || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction changeTag(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function changeTag$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(changeTagAPI, action.data, action.boardNum);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_CHANGE_TAG_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_CHANGE_TAG_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadSearchPostAPI(data, lastId, local) {\n  console.log(data);\n  return axios.get(\"/posts/\".concat(encodeURIComponent(data), \"/post?lastId=\").concat(lastId || 0, \"&local=\").concat(local || \"선택안함\")); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction loadSearchPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSearchPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadSearchPostAPI, action.data, action.lastId, action.local);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_SEARCH_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_SEARCH_POSTS_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction rentalPostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(\"/posts/\".concat(data, \"/post?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction rentalPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function rentalPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(rentalPostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_RENTAL_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_RENTAL_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction writePostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(\"/posts/\".concat(data, \"/post?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction writePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function writePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(writePostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_WRITE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: LOAD_WRITE_POST_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction loadSPostAPI(postId, postBoardNum) {\n  return axios.get(\"/post/singlepost?postId=\".concat(postId, \"&postBoardNum=\").concat(postBoardNum));\n}\n\nfunction loadSPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadSPostAPI, action.postId, action.postBoardNum);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: LOAD_SPOST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_SPOST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: LIKE_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context10.next = 12;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          _context10.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context12.next = 13;\n          break;\n\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.error(_context12.t0);\n          _context12.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context12.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // formdata는 { name: data } 같은 식으로 감싸버리면 json으로 자동 변환되버린다.\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.prev = 0;\n          _context14.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context14.sent;\n          _context14.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context14.next = 13;\n          break;\n\n        case 8:\n          _context14.prev = 8;\n          _context14.t0 = _context14[\"catch\"](0);\n          console.error(_context14.t0);\n          _context14.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context14.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14, null, [[0, 8]]);\n}\n\nfunction RelatedPostAPI(lastId) {\n  return axios.get(\"/posts/related?lastId=\".concat(lastId || 0));\n}\n\n_c = RelatedPostAPI;\n\nfunction RelatedPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function RelatedPost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(RelatedPostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_RELATED_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LOAD_RELATED_POST_FAILURE,\n            error: _context15.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\n_c2 = RelatedPost;\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.prev = 0;\n          _context16.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context16.sent;\n          _context16.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context16.next = 13;\n          break;\n\n        case 8:\n          _context16.prev = 8;\n          _context16.t0 = _context16[\"catch\"](0);\n          console.error(_context16.t0);\n          _context16.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context16.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16, null, [[0, 8]]);\n}\n\nfunction loadLikedPostsAPI(data, lastId) {\n  return axios.get(\"/liked?lastId=\".concat(lastId || 0));\n}\n\nfunction loadLikedPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadLikedPosts$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(loadLikedPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_LIKED_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: LOAD_LIKED_POSTS_FAILURE,\n            error: _context17.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction modifyPostAPI(data) {\n  return axios.patch(\"/post/\".concat(data.PostId), data);\n}\n\nfunction modifyPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function modifyPost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          _context18.next = 3;\n          return call(modifyPostAPI, action.data);\n\n        case 3:\n          result = _context18.sent;\n          _context18.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: MODIFY_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context18.next = 12;\n          break;\n\n        case 8:\n          _context18.prev = 8;\n          _context18.t0 = _context18[\"catch\"](0);\n          _context18.next = 12;\n          return put({\n            type: MODIFY_POST_FAILURE,\n            error: _context18.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}\n\nfunction watchLoadSPost() {\n  return _regeneratorRuntime.wrap(function watchLoadSPost$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          _context26.next = 2;\n          return takeLatest(LOAD_SPOST_REQUEST, loadSPost);\n\n        case 2:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked26);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          _context27.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, _marked27);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context28) {\n    while (1) {\n      switch (_context28.prev = _context28.next) {\n        case 0:\n          _context28.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context28.stop();\n      }\n    }\n  }, _marked28);\n}\n\nfunction watchModifyPost() {\n  return _regeneratorRuntime.wrap(function watchModifyPost$(_context29) {\n    while (1) {\n      switch (_context29.prev = _context29.next) {\n        case 0:\n          _context29.next = 2;\n          return takeLatest(MODIFY_POST_REQUEST, modifyPost);\n\n        case 2:\n        case \"end\":\n          return _context29.stop();\n      }\n    }\n  }, _marked29);\n}\n\nfunction watchLoadRelatedPost() {\n  return _regeneratorRuntime.wrap(function watchLoadRelatedPost$(_context30) {\n    while (1) {\n      switch (_context30.prev = _context30.next) {\n        case 0:\n          _context30.next = 2;\n          return takeLatest(LOAD_RELATED_POST_REQUEST, RelatedPost);\n\n        case 2:\n        case \"end\":\n          return _context30.stop();\n      }\n    }\n  }, _marked30);\n}\n\nfunction watchLoadLikedtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadLikedtagPosts$(_context31) {\n    while (1) {\n      switch (_context31.prev = _context31.next) {\n        case 0:\n          _context31.next = 2;\n          return takeLatest(LOAD_LIKED_POSTS_REQUEST, loadLikedPosts);\n\n        case 2:\n        case \"end\":\n          return _context31.stop();\n      }\n    }\n  }, _marked31);\n}\n\nfunction watchLoadRentalPost() {\n  return _regeneratorRuntime.wrap(function watchLoadRentalPost$(_context32) {\n    while (1) {\n      switch (_context32.prev = _context32.next) {\n        case 0:\n          _context32.next = 2;\n          return takeLatest(LOAD_RENTAL_POST_REQUEST, rentalPost);\n\n        case 2:\n        case \"end\":\n          return _context32.stop();\n      }\n    }\n  }, _marked32);\n}\n\nfunction watchLoadWritePost() {\n  return _regeneratorRuntime.wrap(function watchLoadWritePost$(_context33) {\n    while (1) {\n      switch (_context33.prev = _context33.next) {\n        case 0:\n          _context33.next = 2;\n          return takeLatest(LOAD_WRITE_POST_REQUEST, writePost);\n\n        case 2:\n        case \"end\":\n          return _context33.stop();\n      }\n    }\n  }, _marked33);\n}\n\nfunction watchLoadSearchPost() {\n  return _regeneratorRuntime.wrap(function watchLoadSearchPost$(_context34) {\n    while (1) {\n      switch (_context34.prev = _context34.next) {\n        case 0:\n          _context34.next = 2;\n          return takeLatest(LOAD_SEARCH_POSTS_REQUEST, loadSearchPost);\n\n        case 2:\n        case \"end\":\n          return _context34.stop();\n      }\n    }\n  }, _marked34);\n}\n\nfunction watchSendDummyPost() {\n  return _regeneratorRuntime.wrap(function watchSendDummyPost$(_context35) {\n    while (1) {\n      switch (_context35.prev = _context35.next) {\n        case 0:\n          _context35.next = 2;\n          return takeLatest(SEND_DUMMYPOST_REQUEST, sendDummyPost);\n\n        case 2:\n        case \"end\":\n          return _context35.stop();\n      }\n    }\n  }, _marked35);\n}\n\nfunction watchLoadChangeTag() {\n  return _regeneratorRuntime.wrap(function watchLoadChangeTag$(_context36) {\n    while (1) {\n      switch (_context36.prev = _context36.next) {\n        case 0:\n          _context36.next = 2;\n          return takeLatest(LOAD_CHANGE_TAG_REQUEST, changeTag);\n\n        case 2:\n        case \"end\":\n          return _context36.stop();\n      }\n    }\n  }, _marked36);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context37) {\n    while (1) {\n      switch (_context37.prev = _context37.next) {\n        case 0:\n          _context37.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadSPost), fork(watchLoadPost), fork(watchLoadRelatedPost), fork(watchLoadHashtagPosts), fork(watchLoadLikedtagPosts), fork(watchLoadUserPosts), fork(watchLikePost), fork(watchUnLikePost), fork(watchRemovePost), fork(watchModifyPost), fork(watchAddComment), fork(watchUploadImages), fork(watchLoadRentalPost), fork(watchLoadWritePost), fork(watchLoadSearchPost), fork(watchSendDummyPost), fork(watchLoadChangeTag)]);\n\n        case 2:\n        case \"end\":\n          return _context37.stop();\n      }\n    }\n  }, _marked37);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RelatedPostAPI\");\n$RefreshReg$(_c2, \"RelatedPost\");","map":{"version":3,"sources":["C:/Bootcamp/teamproject/project/LocalRentalKing/front/sagas/post.js"],"names":["addPost","sendDummyPost","removePost","loadPost","changeTag","loadSearchPost","rentalPost","writePost","loadSPost","likePost","unlikePost","addComment","uploadImages","loadUserPosts","RelatedPost","loadHashtagPosts","loadLikedPosts","modifyPost","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","watchUnLikePost","watchUploadImages","watchLoadSPost","watchLoadUserPosts","watchLoadHashtagPosts","watchModifyPost","watchLoadRelatedPost","watchLoadLikedtagPosts","watchLoadRentalPost","watchLoadWritePost","watchLoadSearchPost","watchSendDummyPost","watchLoadChangeTag","postSaga","all","call","fork","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_CHANGE_TAG_FAILURE","LOAD_CHANGE_TAG_REQUEST","LOAD_CHANGE_TAG_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_LIKED_POSTS_FAILURE","LOAD_LIKED_POSTS_REQUEST","LOAD_LIKED_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_RELATED_POST_FAILURE","LOAD_RELATED_POST_REQUEST","LOAD_RELATED_POST_SUCCESS","LOAD_RENTAL_POST_FAILURE","LOAD_RENTAL_POST_REQUEST","LOAD_RENTAL_POST_SUCCESS","LOAD_SEARCH_POSTS_FAILURE","LOAD_SEARCH_POSTS_REQUEST","LOAD_SEARCH_POSTS_SUCCESS","LOAD_SPOST_FAILURE","LOAD_SPOST_REQUEST","LOAD_SPOST_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_WRITE_POST_FAILURE","LOAD_WRITE_POST_REQUEST","LOAD_WRITE_POST_SUCCESS","MODIFY_POST_FAILURE","MODIFY_POST_REQUEST","MODIFY_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","SEND_DUMMYPOST_FAILURE","SEND_DUMMYPOST_REQUEST","SEND_DUMMYPOST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","action","result","type","id","error","response","sendDummyPostAPI","removePostAPI","loadPostAPI","lastId","boardNum","console","log","get","encodeURIComponent","changeTagAPI","loadSearchPostAPI","local","rentalPostAPI","writePostAPI","loadSPostAPI","postId","postBoardNum","likePostAPI","patch","unlikePostAPI","addCommentAPI","uploadImagesAPI","loadUserPostsAPI","RelatedPostAPI","loadHashtagPostsAPI","loadLikedPostsAPI","modifyPostAPI","PostId"],"mappings":"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","sourcesContent":["import {all, call, fork, put, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS, LOAD_CHANGE_TAG_FAILURE, LOAD_CHANGE_TAG_REQUEST, LOAD_CHANGE_TAG_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_FAILURE,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_LIKED_POSTS_FAILURE,\r\n  LOAD_LIKED_POSTS_REQUEST,\r\n  LOAD_LIKED_POSTS_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  LOAD_RELATED_POST_FAILURE,\r\n  LOAD_RELATED_POST_REQUEST,\r\n  LOAD_RELATED_POST_SUCCESS,\r\n  LOAD_RENTAL_POST_FAILURE,\r\n  LOAD_RENTAL_POST_REQUEST,\r\n  LOAD_RENTAL_POST_SUCCESS, LOAD_SEARCH_POSTS_FAILURE, LOAD_SEARCH_POSTS_REQUEST, LOAD_SEARCH_POSTS_SUCCESS,\r\n  LOAD_SPOST_FAILURE,\r\n  LOAD_SPOST_REQUEST,\r\n  LOAD_SPOST_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_WRITE_POST_FAILURE,\r\n  LOAD_WRITE_POST_REQUEST,\r\n  LOAD_WRITE_POST_SUCCESS,\r\n  MODIFY_POST_FAILURE,\r\n  MODIFY_POST_REQUEST,\r\n  MODIFY_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS, SEND_DUMMYPOST_FAILURE, SEND_DUMMYPOST_REQUEST, SEND_DUMMYPOST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data); // formdata 전송\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction sendDummyPostAPI(data) {\r\n  return axios.post('/post/write', data); // formdata 전송\r\n}\r\n\r\nfunction* sendDummyPost(action) {\r\n  try {\r\n    const result = yield call(sendDummyPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: SEND_DUMMYPOST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SEND_DUMMYPOST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`); // delete는 데이터를 가져갈 수 없다 data는 postId\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostAPI(data, lastId , boardNum) {\r\n  console.log(data);\r\n  return axios.get(`/posts/${encodeURIComponent(data)}/post?lastId=${lastId || 0}&boardNum=${boardNum || 0}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data, action.lastId , action.boardNum);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction changeTagAPI(data , boardNum) {\r\n  console.log(data);\r\n  return axios.get(`/posts/${encodeURIComponent(data)}/tag?boardNum=${boardNum || 0}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* changeTag(action) {\r\n  try {\r\n    const result = yield call(changeTagAPI, action.data , action.boardNum);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_CHANGE_TAG_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_CHANGE_TAG_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadSearchPostAPI(data, lastId , local) {\r\n  console.log(data);\r\n  return axios.get(`/posts/${encodeURIComponent(data)}/post?lastId=${lastId || 0}&local=${local || \"선택안함\"}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* loadSearchPost(action) {\r\n  try {\r\n    const result = yield call(loadSearchPostAPI, action.data, action.lastId , action.local);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_SEARCH_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_SEARCH_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction rentalPostAPI(data, lastId) { // 대상유저 id\r\n  console.log(data);\r\n  return axios.get(`/posts/${(data)}/post?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* rentalPost(action) {\r\n  try {\r\n    const result = yield call(rentalPostAPI, action.data, action.lastId );\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_RENTAL_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_RENTAL_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction writePostAPI(data, lastId) { // 대상유저 id\r\n  console.log(data);\r\n  return axios.get(`/posts/${(data)}/post?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* writePost(action) {\r\n  try {\r\n    const result = yield call(writePostAPI, action.data, action.lastId );\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_WRITE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_WRITE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadSPostAPI(postId,postBoardNum) {\r\n  return axios.get(`/post/singlepost?postId=${postId}&postBoardNum=${postBoardNum}`);\r\n}\r\n\r\nfunction* loadSPost(action) {\r\n  try {\r\n    const result = yield call(loadSPostAPI, action.postId,action.postBoardNum);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LOAD_SPOST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_SPOST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data, // PostId,UserId\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data, // PostId,UserId\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data); // formdata는 { name: data } 같은 식으로 감싸버리면 json으로 자동 변환되버린다.\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction RelatedPostAPI(lastId) {\r\n  return axios.get(`/posts/related?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* RelatedPost(action) {\r\n  try {\r\n    const result = yield call(RelatedPostAPI, action.data, action.lastId);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_RELATED_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_RELATED_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_HASHTAG_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadLikedPostsAPI(data, lastId) {\r\n  return axios.get(`/liked?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadLikedPosts(action) {\r\n  try {\r\n    const result = yield call(loadLikedPostsAPI, action.data, action.lastId);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: LOAD_LIKED_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_LIKED_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction modifyPostAPI(data) {\r\n  return axios.patch(`/post/${data.PostId}`, data);\r\n}\r\n\r\nfunction* modifyPost(action) {\r\n  try {\r\n    const result = yield call(modifyPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: MODIFY_POST_SUCCESS,\r\n      data: result.data, // PostId,UserId\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: MODIFY_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest( LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLoadSPost() {\r\n  yield takeLatest(LOAD_SPOST_REQUEST, loadSPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchModifyPost() {\r\n  yield takeLatest(MODIFY_POST_REQUEST, modifyPost);\r\n}\r\n\r\nfunction* watchLoadRelatedPost() {\r\n  yield takeLatest(LOAD_RELATED_POST_REQUEST, RelatedPost);\r\n}\r\n\r\nfunction* watchLoadLikedtagPosts() {\r\n  yield takeLatest(LOAD_LIKED_POSTS_REQUEST, loadLikedPosts);\r\n}\r\n\r\nfunction* watchLoadRentalPost() {\r\n  yield takeLatest(LOAD_RENTAL_POST_REQUEST, rentalPost);\r\n}\r\n\r\nfunction* watchLoadWritePost() {\r\n  yield takeLatest(LOAD_WRITE_POST_REQUEST, writePost);\r\n}\r\n\r\nfunction* watchLoadSearchPost() {\r\n  yield takeLatest(LOAD_SEARCH_POSTS_REQUEST, loadSearchPost);\r\n}\r\n\r\nfunction* watchSendDummyPost() {\r\n  yield takeLatest(SEND_DUMMYPOST_REQUEST, sendDummyPost);\r\n}\r\n\r\nfunction* watchLoadChangeTag() {\r\n  yield takeLatest(LOAD_CHANGE_TAG_REQUEST, changeTag);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadSPost),\r\n    fork(watchLoadPost),\r\n    fork(watchLoadRelatedPost),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadLikedtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n    fork(watchRemovePost),\r\n    fork(watchModifyPost),\r\n    fork(watchAddComment),\r\n    fork(watchUploadImages),\r\n    fork(watchLoadRentalPost),\r\n    fork(watchLoadWritePost),\r\n    fork(watchLoadSearchPost),\r\n    fork(watchSendDummyPost),\r\n    fork(watchLoadChangeTag),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}