{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, MODIFY_POST_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nmoment.locale('ko');\n\nfunction PostCard({\n  post\n}) {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const liked = post.Likers.find(v => v.id === id);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  });\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onChangePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: MODIFY_POST_REQUEST,\n      data: post\n    });\n  }, []);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, !post.RetweetId && __jsx(Button, {\n        onClick: onClickUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 43\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 23\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 48\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 24\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      onCancelUpdate: onCancelUpdate,\n      editMode: editMode,\n      postData: post.content,\n      onChangePost: onChangePost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }))), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: `/user/${item.User.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 19\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 24\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  })));\n}\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useCallback","useState","Button","Card","Popover","Avatar","List","Comment","EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","Link","useDispatch","useSelector","PropTypes","moment","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","MODIFY_POST_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","state","commentFormOpened","setCommentFormOpened","editMode","setEditMode","id","user","me","liked","Likers","find","v","onLike","alert","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","onChangePost","onClickUpdate","onCancelUpdate","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item","propTypes","shape","number","object","UserId","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport Link from 'next/link';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PropTypes } from 'prop-types';\r\nimport moment from 'moment';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, MODIFY_POST_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nmoment.locale('ko');\r\n\r\nfunction PostCard({ post }) {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading } = useSelector((state) => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, [id]);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  });\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onChangePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: MODIFY_POST_REQUEST,\r\n      data: post,\r\n    });\r\n  }, []);\r\n\r\n  const onClickUpdate = useCallback(() => {\r\n    setEditMode(true);\r\n  }, []);\r\n\r\n  const onCancelUpdate = useCallback(() => {\r\n    setEditMode(false);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id\r\n                  ? (\r\n                    <>\r\n                      {!post.RetweetId && <Button onClick={onClickUpdate}>수정</Button>}\r\n                      <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n                    )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.Retweet.User.id}`}>\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} onCancelUpdate={onCancelUpdate} onChangePost={onChangePost} />}\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <>\r\n              <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.User.id}`}>\r\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n              )}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent onCancelUpdate={onCancelUpdate} editMode={editMode} postData={post.content} onChangePost={onChangePost} />}\r\n              />\r\n            </>\r\n          )}\r\n\r\n      </Card>\r\n      {commentFormOpened && (\r\n      <div>\r\n        <CommentForm post={post} />\r\n        <List\r\n          header={`${post.Comments.length}개의 댓글`}\r\n          itemLayout=\"horizontal\"\r\n          dataSource={post.Comments}\r\n          renderItem={(item) => (\r\n            <li>\r\n              <Comment\r\n                author={item.User.nickname}\r\n                avatar={(\r\n                  <Link href={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                content={item.content}\r\n              />\r\n            </li>\r\n          )}\r\n        />\r\n      </div>\r\n      )}\r\n      {/* <CommentForm/> */}\r\n      {/* <Comments/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    UserId: PropTypes.number,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}