{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCardContent.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Button, Input } from 'antd';\nimport { useSelector } from 'react-redux';\nvar TextArea = Input.TextArea;\n\nfunction PostCardContent(_ref) {\n  _s();\n\n  var _this = this;\n\n  var postData = _ref.postData,\n      editMode = _ref.editMode,\n      onCancelUpdate = _ref.onCancelUpdate,\n      onChangePost = _ref.onChangePost;\n\n  var _useState = useState(postData),\n      editText = _useState[0],\n      setEditText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      modifyPostLoading = _useSelector.modifyPostLoading,\n      modifyPostDone = _useSelector.modifyPostDone;\n\n  useEffect(function () {\n    if (modifyPostDone) {}\n  }, [modifyPostDone]);\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, editMode ? __jsx(React.Fragment, null, __jsx(TextArea, {\n    value: editText,\n    onchange: onChangeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }), __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    loading: modifyPostLoading,\n    onClick: onChangePost(editText),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, \"\\uC218\\uC815\"), \"}\", __jsx(Button, {\n    type: \"danger\",\n    onClick: onCancelUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\"))) : postData.split(/(#[^\\s#]+)/g).map(function (v, i) {\n    if (v.match(/(#[^\\s#]+)/)) {\n      return __jsx(Link, {\n        href: \"/hashtag/\".concat(v.slice(1)),\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 20\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 66\n        }\n      }, v));\n    }\n\n    return v;\n  }));\n}\n\n_s(PostCardContent, \"LC36VHELAt0zDyGzx3gQGuxal54=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onCancelUpdate: PropTypes.func.isRequired,\n  onChangePost: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/components/PostCardContent.js"],"names":["React","useCallback","useEffect","useState","Link","PropTypes","Button","Input","useSelector","TextArea","PostCardContent","postData","editMode","onCancelUpdate","onChangePost","editText","setEditText","state","post","modifyPostLoading","modifyPostDone","onChangeText","e","target","value","split","map","v","i","match","slice","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { TextArea } = Input;\r\n\r\nfunction PostCardContent({ postData, editMode, onCancelUpdate, onChangePost }) {\r\n  const [editText, setEditText] = useState(postData);\r\n  const { modifyPostLoading, modifyPostDone } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    if (modifyPostDone) {\r\n\r\n    }\r\n  }, [modifyPostDone]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setEditText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {editMode\r\n        ? (\r\n          <>\r\n            <TextArea value={editText} onchange={onChangeText} />\r\n            <Button.Group>\r\n              <Button loading={modifyPostLoading} onClick={onChangePost(editText)}>수정</Button>}\r\n              <Button type=\"danger\" onClick={onCancelUpdate}>취소</Button>\r\n            </Button.Group>\r\n          </>\r\n        )\r\n        : postData.split(/(#[^\\s#]+)/g).map((v, i) => {\r\n          if (v.match(/(#[^\\s#]+)/)) {\r\n            return <Link href={`/hashtag/${v.slice(1)}`} key={i}><a>{v}</a></Link>;\r\n          }\r\n          return v;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCardContent.propTypes = { postData: PropTypes.string.isRequired,\r\n  editMode: PropTypes.bool,\r\n  onCancelUpdate: PropTypes.func.isRequired,\r\n  onChangePost: PropTypes.func.isRequired,\r\n};\r\n\r\nPostCardContent.defaultProps = {\r\n  editMode: false,\r\n};\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}