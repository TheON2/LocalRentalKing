{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\objectrecieve.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport wrapper from '../store/configureStore';\nimport Head from 'next/head';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_O_RECIEVE_POST_REQUEST } from '../reducers/post';\nimport useSWR from \"swr\";\nimport { Tag } from \"antd\";\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nfunction ObjectRecieve() {\n  const dispatch = useDispatch();\n  const [ref, inView] = useInView();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    id\n  } = useSelector(state => state.post);\n  const {\n    data,\n    error\n  } = useSWR(`${backUrl}/user/followers?limit=${followersLimit}`, fetcher);\n  const {\n    CheckableTag\n  } = Tag;\n  const tagsData = ['공구', 'Books', 'Music', 'Sports'];\n  const {\n    0: selectedTags,\n    1: setSelectedTags\n  } = useState([]);\n  const handleChange = useCallback((tag, checked) => {\n    const nextSelectedTags = checked ? [tag, ...selectedTags] : selectedTags.filter(t => t !== tag);\n    setSelectedTags(nextSelectedTags);\n    console.log('You are interested in: ', nextSelectedTags);\n    console.log('You are interested in: ', nextSelectedTags[0]);\n  }, []);\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  () => {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n      dispatch({\n        type: LOAD_O_RECIEVE_POST_REQUEST,\n        lastId,\n        // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n        category // 매개변수로 어떤 카테고리의 게시물을 들고올지까지 정해준다면??\n\n      });\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"\\uBB3C\\uAC74\\uC744 \\uBE4C\\uB824\\uC918 | \\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\")), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Categories:\"), tagsData.map(tag => __jsx(CheckableTag, {\n    key: tag,\n    checked: selectedTags.indexOf(tag) > -1,\n    onChange: checked => handleChange(tag, checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, tag)), me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 34\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_O_RECIEVE_POST_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default ObjectRecieve;","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/objectrecieve.js"],"names":["React","useCallback","useEffect","useState","axios","wrapper","Head","useDispatch","useSelector","END","useInView","AppLayout","LOAD_MY_INFO_REQUEST","LOAD_O_RECIEVE_POST_REQUEST","useSWR","Tag","fetcher","url","get","withCredentials","then","result","data","ObjectRecieve","dispatch","ref","inView","me","state","user","mainPosts","hasMorePost","loadPostLoading","id","post","error","backUrl","followersLimit","CheckableTag","tagsData","selectedTags","setSelectedTags","handleChange","tag","checked","nextSelectedTags","filter","t","console","log","lastId","length","type","category","marginRight","map","indexOf","undefined","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport wrapper from '../store/configureStore';\r\nimport Head from 'next/head';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_O_RECIEVE_POST_REQUEST } from '../reducers/post';\r\nimport useSWR from \"swr\";\r\nimport {Tag} from \"antd\";\r\n\r\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((result) => result.data);\r\n\r\nfunction ObjectRecieve() {\r\n  const dispatch = useDispatch();\r\n  const [ref, inView] = useInView();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, id } = useSelector((state) => state.post);\r\n\r\n  const { data, error } = useSWR(`${backUrl}/user/followers?limit=${followersLimit}`, fetcher);\r\n\r\n  const { CheckableTag } = Tag;\r\n\r\n  const tagsData = ['공구', 'Books', 'Music', 'Sports'];\r\n\r\n  const [selectedTags,setSelectedTags] =useState([]);\r\n\r\n  const handleChange = useCallback((tag, checked) => {\r\n    const nextSelectedTags = checked ? [ tag,...selectedTags,] : selectedTags.filter(t => t !== tag);\r\n    setSelectedTags(nextSelectedTags);\r\n    console.log('You are interested in: ', nextSelectedTags);\r\n    console.log('You are interested in: ', nextSelectedTags[0]);\r\n  },[]);\r\n  \r\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n        dispatch({\r\n          type: LOAD_O_RECIEVE_POST_REQUEST,\r\n          lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n          category, // 매개변수로 어떤 카테고리의 게시물을 들고올지까지 정해준다면??\r\n        });\r\n      }\r\n    },\r\n    [inView, hasMorePost, loadPostLoading, mainPosts, id],\r\n  );\r\n\r\n  if (!me) {\r\n    return '내 정보 로딩중...';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>물건을 빌려줘 | 우리동네 렌탈대장</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <span style={{ marginRight: 8 }}>Categories:</span>\r\n        {tagsData.map(tag => (\r\n          <CheckableTag\r\n            key={tag}\r\n            checked={selectedTags.indexOf(tag) > -1}\r\n            onChange={checked => handleChange(tag, checked)}\r\n          >\r\n            {tag}\r\n          </CheckableTag>\r\n        ))}\r\n        {me && <PostForm />}\r\n        {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n        {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_O_RECIEVE_POST_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default ObjectRecieve;\r\n"]},"metadata":{},"sourceType":"module"}